# Table of contents
# Learn more at https://jupyterbook.org/customize/toc.html

format: jb-book
root: index
title: Introduction
defaults:
  numbered: true
chapters:
#- caption: Fundamentals
#  numbered: true
#  chapters:
  - file: chapters/sets
    title: 🟢 Sets
  - file: chapters/functions
    title: 🟢 Functions
  - file: chapters/algorithms
    title: 🟠 Algorithms
  - file: chapters/computation
    title: 🟠 Computation
  - file: chapters/terminals
  - file: chapters/syntax
    title: 🟢 Syntax
  - file: chapters/semantics
    title: 🟢 Semantics
  - file: chapters/compilation
    title: 🟢 Compilation
  - file: chapters/execution
    title: 🟢 Execution
  - file: chapters/interpretation
    title: 🟢 Interpretation
  - file: chapters/errors
    title: 🟢 Errors
  #- file: chapters/source-code
  #- file: chapters/markup
  - file: chapters/documentation
  - file: chapters/comments
    title: 🟢 Comments
  - file: chapters/standard-out
  - file: chapters/values
    title: 🟢 Values
  - file: chapters/variables
    title: 🟢 Variables
  - file: chapters/standard-in
  - file: chapters/indentation
  - file: chapters/statements
  - file: chapters/expressions
  - file: chapters/operators
  - file: chapters/data-types
    title: 🟢 Data types
  - file: chapters/selection
  - file: chapters/paradigms
  - file: chapters/type-conversions
  - file: chapters/type-checking
    title: 🟢 Type-checking
  - file: chapters/type-systems
    title: 🟢 Type systems
  - file: chapters/nothingness
    title: 🟢 Nothingness
  - file: chapters/type-hierarchies
  - file: chapters/abstraction
  - file: chapters/indirection
  - file: chapters/business-logic
  - file: chapters/debugging
#- caption: Procedural programming
#  numbered: true
#  chapters:
  - file: chapters/arrays
  - file: chapters/syntactic-sugar
  - file: chapters/iteration
  - file: chapters/command-line-arguments
  - file: chapters/mutability
  - file: chapters/type-testing
  - file: chapters/value-and-reference-semantics
  - file: chapters/simple-types
  - file: chapters/static-methods
  - file: chapters/purity
  - file: chapters/static-classes
  - file: chapters/data-structures
  - file: chapters/composition
  - file: chapters/overloading
  - file: chapters/recursion
  - file: chapters/scope
  - file: chapters/namespaces
  - file: chapters/basic-exceptions
  - file: chapters/stack-traces
#- caption: Object oriented programming
#  numbered: true
#  chapters:
  - file: chapters/pillars
  - file: chapters/objects
    title: 🟠 Objects
  - file: chapters/classes
  - file: chapters/fields
  - file: chapters/constructors
  - file: chapters/instance-methods
    title: 🟠 Instance methods
  - file: chapters/type-signatures
  - file: chapters/instance-variables
  - file: chapters/basic-access-modifiers
  - file: chapters/properties
  - file: chapters/object-composition-1
  - file: chapters/object-composition-2
  - file: chapters/immutable-objects
  - file: chapters/interfaces
  - file: chapters/subtype-polymorphism
  - file: chapters/inheritance
  - file: chapters/overriding
  - file: chapters/hiding
  - file: chapters/advanced-access-modifiers
  - file: chapters/object-type-conversions
  - file: chapters/advanced-exceptions
  - file: chapters/prototypes
  - file: chapters/object-composition-3
  - file: chapters/base-class-library
  - file: chapters/boxing
  - file: chapters/structure-types
  - file: chapters/anonymous-types
  - file: chapters/generics
  - file: chapters/variance
  - file: chapters/business-objects
#- caption: Object oriented design
#  numbered: true
#  chapters:
  - file: chapters/requirements
  - file: chapters/correctness
  - file: chapters/maintainability
  - file: chapters/code-smells
  - file: chapters/coupling
  - file: chapters/cohesion
  - file: chapters/refactoring
  - file: chapters/design-principles
  - file: chapters/single-responsibility-principle
  - file: chapters/interface-segregation-principle
  - file: chapters/deep-classes
  - file: chapters/types-over-tests
  - file: chapters/define-errors-out-of-existence
  - file: chapters/liskov-substitution-principle
  - file: chapters/open-closed-principle
  - file: chapters/dependency-inversion-principle
  - file: chapters/composition-over-inheritance
  - file: chapters/documentation-driven-development
#- caption: Advanced object oriented programming
#  numbered: true
#  chapters:
  - file: chapters/design-patterns
  - file: chapters/strategy-pattern
  - file: chapters/delegates
  - file: chapters/extension-methods
  - file: chapters/null-object-pattern
  - file: chapters/adapter-pattern
  - file: chapters/bridge-pattern
  - file: chapters/lambdas
  - file: chapters/abstract-factory-pattern
  - file: chapters/iterator-pattern
  - file: chapters/enumerators
  - file: chapters/indexers
  - file: chapters/linq
  - file: chapters/observer-pattern
  - file: chapters/events
  - file: chapters/visitor-pattern
  - file: chapters/pattern-matching
#- caption: Epilogue
#  numbered: false
#  chapters:
  - file: chapters/reading
  - file: chapters/bibliography
